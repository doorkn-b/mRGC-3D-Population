// Modified from monopolar electrode stim.hoc
//
// Implements hexagonal stimulation electrodes, where the centre electrode delivers 
// the stimuli while the six surrounding electrodes sink the return current with 
// one-sixth the load each.
//
// Refer to stim.hoc for details on the extracellular mechanism, principle of 
// reciprocity, and principle of superposition. 

{load_file("../../RGC/common/global.hoc")}

// start parameter config (START point for Python parsing)
// stimHex-foveal.hoc

// resistivity of medium (ohm cm)
rho = 110  // 60 in Greenberg99; 35.4 for sea water
Rstdelec = 0.725  // 0.1875: transfer resist. factor for 10um radius disk in Ames

// hex electrode
elecRad = 5   // electrode radius (um)
hexDisp = 30   // electrode centre-surround pitch (um)
stimX   = 0   // default centre X (um)  // re-declared by waveformXXX.hoc
stimY   = 0   // default centre Y (um)  // re-declared by waveformXXX.hoc
stimZ   = -80  // default centre Z (um)  // re-declared by waveformXXX.hoc

// rectangular pulse train // only stimDel is passed into custom waveform procs 
stimDel    = 010      // ms
stimDur    = 0.1      // ms                 // re-declare 
stimAmp    = 0        // mA                 // re-declare 
interPhase = 0        // ms 
interPulse = 5       // ms                  // re-declare 
repeats    = 1                              // re-declare 

// end parameter config (STOP point for Python parsing)

objref stim_amp, stim_time
stim_amp = new Vector()
stim_time = new Vector()


/////////////////////////////////////////////////////////////////////

func arcsin() {
    // non-iterative approximation of arcsine function
    a0 = 1.5707288
    a1 = -0.2121144
    a2 = 0.0742610
    a3 = -0.0187293    
    return PI/2 - sqrt(1 - $1)*(a0 + a1*$1 + a2*$1^2 + a3*$1^3)
}

proc setrx() {
    stimX = $1
    stimY = $2
    stimZ = $3
    // hexagon surround electrodes' displacement
    hexDX = hexDisp*cos(1.0472)
    hexDY = hexDisp*sin(1.0472)

    // resistance scaling by electrode area
    Relec = Rstdelec*(100/elecRad^2)

    forall {
        if (ismembrane("xtra")) {
            // avoid nodes at 0 and 1 ends: not override values at internal nodes
            for (x,0) {
                // center
                r = sqrt((x_xtra(x)-stimX)^2 + (y_xtra(x)-stimY)^2)
                geo = 2*elecRad / \
                    (sqrt((r-elecRad)^2 + (z_xtra(x)-stimZ)^2) + \
                     sqrt((r+elecRad)^2 + (z_xtra(x)-stimZ)^2))
                rxC = 2 * Relec * (1/PI) * arcsin(geo)

                // surround NE
                r = sqrt((x_xtra(x)-stimX-hexDX)^2 + (y_xtra(x)-stimY-hexDY)^2)
                geo = 2*elecRad / \
                    (sqrt((r-elecRad)^2 + (z_xtra(x)-stimZ)^2) + \
                     sqrt((r+elecRad)^2 + (z_xtra(x)-stimZ)^2))
                rxS1 = -1/6 * 2 * Relec * (1/PI) * arcsin(geo)

                // surround E
                r = sqrt((x_xtra(x)-stimX-hexDisp)^2 + (y_xtra(x)-stimY)^2)
                geo = 2*elecRad / \
                    (sqrt((r-elecRad)^2 + (z_xtra(x)-stimZ)^2) + \
                     sqrt((r+elecRad)^2 + (z_xtra(x)-stimZ)^2))
                rxS2 = -1/6 * 2 * Relec * (1/PI) * arcsin(geo)

                // surround SE
                r = sqrt((x_xtra(x)-stimX-hexDX)^2 + (y_xtra(x)-stimY+hexDY)^2)
                geo = 2*elecRad / \
                    (sqrt((r-elecRad)^2 + (z_xtra(x)-stimZ)^2) + \
                     sqrt((r+elecRad)^2 + (z_xtra(x)-stimZ)^2))
                rxS3 = -1/6 * 2 * Relec * (1/PI) * arcsin(geo)

                // surround SW
                r = sqrt((x_xtra(x)-stimX+hexDX)^2 + (y_xtra(x)-stimY+hexDY)^2)
                geo = 2*elecRad / \
                    (sqrt((r-elecRad)^2 + (z_xtra(x)-stimZ)^2) + \
                     sqrt((r+elecRad)^2 + (z_xtra(x)-stimZ)^2))
                rxS4 = -1/6 * 2 * Relec * (1/PI) * arcsin(geo)

                // surround W
                r = sqrt((x_xtra(x)-stimX+hexDisp)^2 + (y_xtra(x)-stimY)^2)
                geo = 2*elecRad / \
                    (sqrt((r-elecRad)^2 + (z_xtra(x)-stimZ)^2) + \
                     sqrt((r+elecRad)^2 + (z_xtra(x)-stimZ)^2))
                rxS5 = -1/6 * 2 * Relec * (1/PI) * arcsin(geo)

                // surround NW
                r = sqrt((x_xtra(x)-stimX+hexDX)^2 + (y_xtra(x)-stimY-hexDY)^2)
                geo = 2*elecRad / \
                    (sqrt((r-elecRad)^2 + (z_xtra(x)-stimZ)^2) + \
                     sqrt((r+elecRad)^2 + (z_xtra(x)-stimZ)^2))
                rxS6 = -1/6 * 2 * Relec * (1/PI) * arcsin(geo)

                // superposition
                rx_xtra(x) = rxC + rxS1 + rxS2 + rxS3 + rxS4 + rxS5 + rxS6
            }
        }
    }
}

// bogus section to show extracell stim/rec electrode location
create sElec

// bogus PointProcess just to show stim location
objref pElec

// will be a Shape that shows extracellular electrode location
objref gElec
gElec = new Shape(0)
if (GLOBAL_HAS_GUI) {
    gElec.view(FIELD_LEFT, FIELD_BOTTOM, FIELD_WIDTH, FIELD_HEIGHT, \
               230, 450, 200, 200)
}

proc drawelec() {
    sElec {
        pt3dclear()
        pt3dadd(stimX-0.5, stimY, stimZ, 1)
        pt3dadd(stimX+0.5, stimY, stimZ, 1)
        pElec = new IClamp(0.5)
    }
    gElec.point_mark(pElec, 4)  // green
}

proc setelec() {
    xe = $1
    ye = $2
    ze = $3
    setrx(xe, ye, ze)
    drawelec(xe, ye, ze)
}

proc stim_waveform() {
    // to be re-defined later with generated code
}

ATTACHED__ = 0
proc attach_stim() {
    // since is_xtra is GLOBAL, we only need to specify Vector.play()
    // for one instance of xtra, i.e. at just one internal node
    // of only one section that contains xtra
    forall {
        if (ATTACHED__ == 0) {
            if (ismembrane("xtra")) {
                stim_amp.play(&is_xtra, stim_time, 1) // "interpolated" play
                ATTACHED__ = 1
            }
        }
    }
}

proc setstim() {
    del = $1
    stim_waveform(del)
    attach_stim()  
}


/////////////////////////////////////////////////////////////////////

// initialize default electrode placement
// setelec(stimX, stimY, stimZ)  // put stim electrode at (x, y, z)

if (GLOBAL_HAS_GUI) {
    xpanel("Extracellular Electrode", 0)
        xvalue("radius (um)", "elecRad", 1, "", 0, 1) 
        xvalue("pitch (um) ", "hexDisp", 1, "", 0, 1) 
        xlabel("hexagon center xyz coords")
        xvalue("x (um)", "stimX", 1, "setElec()", 0, 1)
        xvalue("y (um)", "stimY", 1, "setElec()", 0, 1)
        xvalue("z (um)", "stimZ", 1, "setElec()", 0, 1)
    xpanel(0,450)
}

// initialize default stimulus pulse settings
// setstim(stimDel)

if (GLOBAL_HAS_GUI) {
    xpanel("Extracellular Stimulus Current", 0)
        xvalue("del (ms)", "stimDel", 1, "setstim()", 0, 1)
        xvalue("dur (ms)", "stimDur", 1, "setstim()", 0, 1)
        xvalue("amp (mA)", "stimAmp", 1, "setstim()", 0, 1)
        xvalue("interPhase (ms)", "interPhase", 1, "setstim()", 0, 1)
        xvalue("interPulse (ms)", "interPulse", 1, "setstim()", 0, 1)
        xvalue("repeat", "repeats", 1, "setstim()", 0, 1)
    xpanel(450,450)
}

